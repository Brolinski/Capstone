@using Scheduler.Domain.Repositories;
@using Scheduler.ViewModels;

@model UpcomingEventsModalViewModel

@{
    string type = this.ViewData["EventType"] as string ?? nameof(Game);

    string? typeFilterMessage = this.ViewData["TypeFilterMessage"] as string;
    string? nameFilterMessage = this.ViewData["NameFilterMessage"] as string;
    string? teamFilterMessage = this.ViewData["TeamFilterMessage"] as string;
}

@if (this.Model is not null &&
     this.Model.Events.Count() > 0)
{
    if (!string.IsNullOrEmpty(typeFilterMessage))
    {
        <h5 class="text-center lead text-danger">@typeFilterMessage</h5>
    }

    if (!string.IsNullOrEmpty(nameFilterMessage))
    {
        <h5 class="text-center lead text-danger">@nameFilterMessage</h5>
    }

    if (!string.IsNullOrEmpty(teamFilterMessage))
    {
        <h5 class="text-center lead text-danger">@teamFilterMessage</h5>
    }

    <br />

    @foreach (Team team in this.Model.CoachTeams)
    {
        bool load = false;

        foreach (Event e in this.Model.Events)
        {
            if (e is Game game)
            {
                if (game.HomeTeamId == team.Id || game.OpposingTeamId == team.Id)
                {
                    load = true;
                }
            }
            if (e is Practice practice)
            {
                if (practice.TeamId == team.Id)
                {
                    load = true;
                }
            }
        }

        if (load)
        {
            <h5 class="text-center text-danger">
                @(type)s for Team @team.Name
            </h5>

            <table class="table-bordered w-100 m-auto text-center list-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Start</th>
                        <th>End</th>
                        <th>Location</th>
                        <th>Team 1</th>
                        <th>Team 2</th>

                        @if (this.User.Identity is not null &&
                             this.User.Identity.IsAuthenticated)
                        {
                            <th>Details</th>
                        }
                    </tr>
                </thead>

                @foreach (Event e in this.Model.Events)
                {
                    if (e is Game game)
                    {
                        if (game.HomeTeamId == team.Id || game.OpposingTeamId == team.Id)
                        {
                            <tr>
                                <td>@e.Name</td>
                                <td>@this.Html.DisplayFor(x => e.StartDate)</td>
                                <td>@this.Html.DisplayFor(x => e.EndDate)</td>
                                <td>@e.Field?.Name</td>

                                @{
                                    Team? homeTeam = this.Model.Teams.FirstOrDefault(t => t.Id == game.HomeTeamId);
                                    Team? awayTeam = this.Model.Teams.FirstOrDefault(t => t.Id == game.OpposingTeamId);
                                }

                                <td>@homeTeam.Name</td>
                                <td>@awayTeam.Name</td>

                                @if (this.User.Identity is not null &&
                                     this.User.Identity.IsAuthenticated)
                                {
                                    <td>
                                        <a asp-action="Details" asp-controller="Schedule" asp-route-id="@e.Id" class="btn btn-sm btn-primary">Details</a>
                                    </td>
                                }
                            </tr>
                        }
                    }
                    else if (e is Practice practice)
                    {
                        if(practice.TeamId == team.Id)
                        {
                            <tr>
                                <td>@e.Name</td>
                                <td>@this.Html.DisplayFor(x => e.StartDate)</td>
                                <td>@this.Html.DisplayFor(x => e.EndDate)</td>
                                <td>@e.Field?.Name</td>

                                @{
                                    Team? homeTeam = this.Model.Teams.FirstOrDefault(t => t.Id == practice.TeamId);
                                }

                                <td>@homeTeam.Name</td>
                                <td class="bg-secondary"></td>

                                    @if (this.User.Identity is not null &&
                                         this.User.Identity.IsAuthenticated)
                                    {
                                        <td>
                                        <form action="@Url.Action("Details", "Schedule", new { id = e.Id })" method="get">
                                            <button type="submit" class="button buttonRed">Details</button>
                                        </form>
                                        </td>
                                    }
                            </tr>
                        }
                    }
                }
            </table>
            <br />
            <br />
        }
    }
}
else if (teamFilterMessage is not null ||
         nameFilterMessage is not null ||
         typeFilterMessage is not null)
{
    <h5 class="text-center lead text-danger">@typeFilterMessage</h5>
    <h5 class="text-center lead text-danger" style="white-space: pre-wrap">@teamFilterMessage</h5>
    <h5 class="text-center lead text-danger">@nameFilterMessage</h5>
}
else
{
    <h5 class="text-center lead text-danger">
        You have no @(type)s scheduled.
    </h5>
}