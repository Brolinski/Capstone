@model IEnumerable<Event>;

@{
    IEnumerable<Team> teams = this.ViewData["Teams"] as IEnumerable<Team> ?? Enumerable.Empty<Team>();

    string typeFilterMessage = this.ViewData["TypeFilterMessage"] as string ?? string.Empty;
    string nameFilterMessage = this.ViewData["NameFilterMessage"] as string ?? string.Empty;
    string teamFilterMessage = this.ViewData["TeamFilterMessage"] as string ?? string.Empty;
}

@if (this.Model is not null && this.Model.Any())
{
    if (typeFilterMessage != string.Empty)
    {
        <h5 class="text-center lead text-danger">@typeFilterMessage</h5>
    }
    if (nameFilterMessage != string.Empty)
    {
        <h5 class="text-center lead text-danger">@nameFilterMessage</h5>
    }
    if (teamFilterMessage != string.Empty)
    {
        <h5 class="text-center lead text-danger">@teamFilterMessage</h5>
    }
    <br />
    <table class="table-bordered text-center w-100 m-auto list-table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Start</th>
                <th>End</th>
                <th>Location</th>
                <th>Team 1</th>
                <th>Team 2</th>
                @if (this.User.Identity is not null &&
                     this.User.Identity.IsAuthenticated)
                {
                    <th>Details</th>
                }
            </tr>
        </thead>
        @{
            foreach (Event e in Model)
            {
                <tr>
                    <td>@e.Name</td>
                    <td>@this.Html.DisplayFor(x => e.StartDate)</td>
                    <td>@this.Html.DisplayFor(x => e.EndDate)</td>

                    @if (e.IsBlackout)
                    {
                        <td>Entire Facility</td>
                    }
                    else
                    {
                        <td>@e.Field?.Name</td>
                        
                    }

                    @if (e is Game game)
                    {
                        Team? homeTeam = teams.FirstOrDefault(t => t.Id == game.HomeTeamId);
                        Team? awayTeam = teams.FirstOrDefault(t => t.Id == game.OpposingTeamId);

                        <td>@homeTeam?.Name</td>
                        <td>@awayTeam?.Name</td>
                    }
                    else if (e is Practice practice)
                    {
                        Team? homeTeam = teams.FirstOrDefault(t => t.Id == practice.TeamId);
                        
                        <td>@homeTeam?.Name</td>
                        <td class="bg-secondary"></td>
                    }
                    else
                    {
                        <td class="bg-secondary"></td>
                        <td class="bg-secondary"></td>
                    }

                    @if (this.User.Identity is not null &&
                         this.User.Identity.IsAuthenticated)
                    {
                        <td>
                            <form action="@this.Url.Action("Details", "Schedule", new { id = e.Id })" method="get">
                                <button type="submit" class="button buttonRed">Details</button>
                            </form>
                        </td>
                    }
                </tr>
            }
        }
    </table>
}
else if (teamFilterMessage is not null ||
         nameFilterMessage is not null ||
         typeFilterMessage is not null)
{
    <h5 class="text-center lead text-danger" >@typeFilterMessage</h5>
    <h5 class="text-center lead text-danger" style="white-space: pre-wrap">@teamFilterMessage</h5>
    <h5 class="text-center lead text-danger">@nameFilterMessage</h5>
}
else
{
    <h5 class="text-center lead text-danger">No Events found</h5>
}