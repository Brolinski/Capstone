@using Scheduler.ViewModels;

@model UpcomingEventsModalViewModel

@{
    this.ViewData["Title"] = "My Scheduled Games";
    this.ViewData["EventType"] = nameof(Game);

    string today = DateTime.Now.ToString("yyyy-MM-dd");
    string startDateString = DateTime.Now.Date.ToString("yyyy-MM-dd");
    string endDateString = DateTime.Now.AddYears(2).ToString("yyyy-MM-dd");
}

<div class="modal fade" id="gamesModalPopup" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header m-auto">
                <h2 class="text-center">@this.ViewData["Title"]</h2>
            </div>
            @if (this.Model.CoachTeamsCount != 0)
            {
                <div class="modal-body">
                    <div class="text-center">
                        <div class="btn-group mb-2 noPrintIfModal">
                            <form class="me-3" action="javascript:void(0);" onsubmit="filterGames(this)" id="gamesFilterForm" autocomplete="off">
                                <div>
                                    <button type="button" class="btn btn-sm btn-secondary" onclick="showGamesModalDropdown()" data-bs-auto-close="false" aria-expanded="false">Filter Results </button>
                                    <ul class="dropdown-menu p-3" style="width:120%" id="gamesModalDropdown">
                                        <h5 class="lead text-danger text-center">Filter Criteria</h5>
                                        <div>
                                            <div class="form-label">
                                                <label class="form-label">Event Date(s)</label>
                                                <input type="text" name="gamesDaterange" class="text-center form-control" />
                                            </div>
                                            <div>
                                                <input name="StartDate" type="hidden" id="StartDate" />
                                                <br />
                                            </div>
                                            <div>
                                                <input name="EndDate" type="hidden" id="EndDate" />
                                            </div>
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label">Event Name</label>
                                            <input type="text" name="searchTerm" class="form-control" />
                                        </div>
                                        @if (this.Model.CoachTeamsCount > 1)
                                        {
                                            <div class="mb-3">
                                                <label class="form-label">Team Name</label>
                                                <select id="coachTeamNameFilterGames" name="teamName" class="form-select">
                                                    <option value=""></option>

                                                    @foreach (Team t in this.Model.CoachTeams)
                                                    {
                                                        <option value=@t.Name>@t.Name</option>
                                                    }
                                                </select>
                                            </div>
                                        }
                                        else
                                        {
                                            Team? team = this.Model.CoachTeams.FirstOrDefault();
                                            string teamName = team is null
                                                ? "Unknown Coach"
                                                : team.Name;

                                            <select name="teamName" hidden value="@teamName"></select>
                                        }
                                        <div class="text-center">
                                            <input type="submit" class="btn btn-sm btn-secondary" value="Filter" />
                                            <button type="button" class="btn btn-sm btn-danger text-end" onclick="closeGamesDropdown()">Close</button>
                                        </div>
                                    </ul>
                                    <button class="btn btn-sm btn-danger" type="reset" onclick="resetGamesFilter()">Reset Filter</button>
                                </div>
                            </form>
                        </div>
                    </div>
                    <div id="gamesModalTable">
                        <partial name="_CoachModalTable" model="this.Model" />
                    </div>
                </div>
                <div class="modal-footer noPrintIfModal">
                    <button class="btn btn-sm btn-secondary" onclick="window.print()">Print These Results</button>
                    <button type="button" class="btn btn-sm btn-danger" data-bs-dismiss="modal">Close</button>
                </div>
            }
            else
            {    
                <div class="modal-body">
                    <h1 class="text-danger text-center display-5">You have no Teams</h1>
                </div>
                <div class="modal-footer noPrintIfModal">
                    <button type="button" class="btn btn-sm btn-danger" data-bs-dismiss="modal">Close</button>
                </div>
            }
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        $("#gamesModalPopup").modal("show");
    });

    function showGamesModalDropdown() {
        $('#gamesModalDropdown').addClass('show');
    }

    function closeGamesDropdown() {
        $('#gamesModalDropdown').removeClass('show');
    }

    $(document).ready(function () {

        $("#coachTeamNameFilterGames").chosen({
            no_results_text: "Sorry, I can't find that Team!",
            placeholder_text_single: "Start typing to select a Team...",
            width: "100%",
            search_contains: true
        });

    });

    var startDateString = "@startDateString";
    var endDateString = "@endDateString";
    var minDateString = "@today";
    var startDate;
    var startDateFormatted;
    var endDate;
    var endDateFormatted;
    var minDate;
    var minDateFormatted;
    startDate = moment(startDateString, "YYYY-MM-DD"); // Parse the start date string and specify the format
    startDateFormatted = startDate.format('M/DD/YYYY'); // Format the start date as desired
    endDate = moment(endDateString, "YYYY-MM-DD"); // Parse the end date string and specify the format
    endDateFormatted = endDate.format('M/DD/YYYY'); // Format the end date as desired
    minDate = moment(minDateString, "YYYY-MM-DD"); // Parse the min date string and specify the format
    minDateFormatted = minDate.format('M/DD/YYYY'); // Format the min date as desired
    $('#StartDate').val(startDateFormatted); // Set initial value of StartDate on the form
    $('#EndDate').val(endDateFormatted); // Set initial value of EndDate on the form


    $(function () {
        $('input[name="gamesDaterange"]').daterangepicker({
            startDate: startDateFormatted,
            endDate: endDateFormatted,
            minDate: minDateFormatted,
            timePickerIncrement: 30,
            drops: "down",
            locale: {
                format: 'M/DD/YYYY'
            }
        }).on('apply.daterangepicker', function (ev, picker) {
            startDateFormatted = picker.startDate.format('M/DD/YYYY');
            endDateFormatted = picker.endDate.format('M/DD/YYYY');
            $('#StartDate').val(startDateFormatted); // Resets the value of StartDate when "Apply" is pressed
            $('#EndDate').val(endDateFormatted); // Resets the value of EndDate when "Apply" is pressed
        });
    });

    function filterGames(e) {
        $.ajax({
            url: '@Url.Action("filterCoachEvents", "Dashboard")',
            data: {
                searchTerm: e.searchTerm.value,
                type: 'Game',
                start: e.StartDate.value,
                end: e.EndDate.value,
                teamName: e.teamName.value
            },
            success: function (data) {
                $("#gamesModalTable").html(data);
                $('#gamesModalDropdown').removeClass('show');
            }
        });
    }

    function resetGamesFilter() {
        $.ajax({
            url: '@Url.Action("filterCoachEvents", "Dashboard")',
            data: {
                searchTerm: '',
                type: 'Game',
                start: '@startDateString',
                end: '@endDateString',
                teamName: ''
            },
            success: function (data) {
                $("#gamesModalTable").html(data);
            }
        });
    }
</script>

<style media="print">
    .noPrintIfModal {
        display: none;
    }

    html, body {
        height: 100%;
        overflow: hidden;
    }
</style>
