// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace Scheduler.Web.Persistence.Migrations
{
	[DbContext(typeof(SchedulerContext))]
	[Migration("20230210021744_InitialCreate")]
	partial class InitialCreate
	{
		/// <inheritdoc />
		protected override void BuildTargetModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "7.0.2")
				.HasAnnotation("Relational:MaxIdentifierLength", 128);

			SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uniqueidentifier");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("nvarchar(max)");

					b.Property<string>("Name")
						.HasMaxLength(256)
						.HasColumnType("nvarchar(256)");

					b.Property<string>("NormalizedName")
						.HasMaxLength(256)
						.HasColumnType("nvarchar(256)");

					b.HasKey("Id");

					b.HasIndex("NormalizedName")
						.IsUnique()
						.HasDatabaseName("RoleNameIndex")
						.HasFilter("[NormalizedName] IS NOT NULL");

					b.ToTable("AspNetRoles", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int");

					SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

					b.Property<string>("ClaimType")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("ClaimValue")
						.HasColumnType("nvarchar(max)");

					b.Property<Guid>("RoleId")
						.HasColumnType("uniqueidentifier");

					b.HasKey("Id");

					b.HasIndex("RoleId");

					b.ToTable("AspNetRoleClaims", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("int");

					SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

					b.Property<string>("ClaimType")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("ClaimValue")
						.HasColumnType("nvarchar(max)");

					b.Property<Guid>("UserId")
						.HasColumnType("uniqueidentifier");

					b.HasKey("Id");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserClaims", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
				{
					b.Property<string>("LoginProvider")
						.HasMaxLength(128)
						.HasColumnType("nvarchar(128)");

					b.Property<string>("ProviderKey")
						.HasMaxLength(128)
						.HasColumnType("nvarchar(128)");

					b.Property<string>("ProviderDisplayName")
						.HasColumnType("nvarchar(max)");

					b.Property<Guid>("UserId")
						.HasColumnType("uniqueidentifier");

					b.HasKey("LoginProvider", "ProviderKey");

					b.HasIndex("UserId");

					b.ToTable("AspNetUserLogins", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
				{
					b.Property<Guid>("UserId")
						.HasColumnType("uniqueidentifier");

					b.Property<Guid>("RoleId")
						.HasColumnType("uniqueidentifier");

					b.HasKey("UserId", "RoleId");

					b.HasIndex("RoleId");

					b.ToTable("AspNetUserRoles", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
				{
					b.Property<Guid>("UserId")
						.HasColumnType("uniqueidentifier");

					b.Property<string>("LoginProvider")
						.HasMaxLength(128)
						.HasColumnType("nvarchar(128)");

					b.Property<string>("Name")
						.HasMaxLength(128)
						.HasColumnType("nvarchar(128)");

					b.Property<string>("Value")
						.HasColumnType("nvarchar(max)");

					b.HasKey("UserId", "LoginProvider", "Name");

					b.ToTable("AspNetUserTokens", (string)null);
				});

			modelBuilder.Entity("Scheduler.Core.Models.Event", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uniqueidentifier");

					b.Property<DateTime>("EndDate")
						.HasColumnType("datetime2");

					b.Property<Guid>("FieldId")
						.HasColumnType("uniqueidentifier");

					b.Property<bool>("IsRecurring")
						.HasColumnType("bit");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("nvarchar(max)");

					b.Property<DateTime>("StartDate")
						.HasColumnType("datetime2");

					b.Property<Guid>("UserId")
						.HasColumnType("uniqueidentifier");

					b.HasKey("Id");

					b.HasIndex("FieldId");

					b.HasIndex("UserId");

					b.ToTable("Events");
				});

			modelBuilder.Entity("Scheduler.Core.Models.Field", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uniqueidentifier");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("nvarchar(max)");

					b.HasKey("Id");

					b.ToTable("Fields");
				});

			modelBuilder.Entity("Scheduler.Core.Models.Game", b =>
				{
					b.Property<Guid>("EventId")
						.HasColumnType("uniqueidentifier");

					b.Property<Guid>("HomeTeamId")
						.HasColumnType("uniqueidentifier");

					b.Property<Guid>("OpposingTeamId")
						.HasColumnType("uniqueidentifier");

					b.HasIndex("EventId");

					b.HasIndex("HomeTeamId");

					b.HasIndex("OpposingTeamId");

					b.ToTable("Games");
				});

			modelBuilder.Entity("Scheduler.Core.Models.Team", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uniqueidentifier");

					b.Property<string>("Name")
						.IsRequired()
						.HasColumnType("nvarchar(max)");

					b.HasKey("Id");

					b.ToTable("Teams");
				});

			modelBuilder.Entity("Scheduler.Core.Models.User", b =>
				{
					b.Property<Guid>("Id")
						.ValueGeneratedOnAdd()
						.HasColumnType("uniqueidentifier");

					b.Property<int>("AccessFailedCount")
						.HasColumnType("int");

					b.Property<string>("ConcurrencyStamp")
						.IsConcurrencyToken()
						.HasColumnType("nvarchar(max)");

					b.Property<string>("Email")
						.HasMaxLength(256)
						.HasColumnType("nvarchar(256)");

					b.Property<bool>("EmailConfirmed")
						.HasColumnType("bit");

					b.Property<bool>("LockoutEnabled")
						.HasColumnType("bit");

					b.Property<DateTimeOffset?>("LockoutEnd")
						.HasColumnType("datetimeoffset");

					b.Property<string>("NormalizedEmail")
						.HasMaxLength(256)
						.HasColumnType("nvarchar(256)");

					b.Property<string>("NormalizedUserName")
						.HasMaxLength(256)
						.HasColumnType("nvarchar(256)");

					b.Property<string>("PasswordHash")
						.HasColumnType("nvarchar(max)");

					b.Property<string>("PhoneNumber")
						.HasColumnType("nvarchar(max)");

					b.Property<bool>("PhoneNumberConfirmed")
						.HasColumnType("bit");

					b.Property<string>("SecurityStamp")
						.HasColumnType("nvarchar(max)");

					b.Property<bool>("TwoFactorEnabled")
						.HasColumnType("bit");

					b.Property<string>("UserName")
						.HasMaxLength(256)
						.HasColumnType("nvarchar(256)");

					b.HasKey("Id");

					b.HasIndex("NormalizedEmail")
						.HasDatabaseName("EmailIndex");

					b.HasIndex("NormalizedUserName")
						.IsUnique()
						.HasDatabaseName("UserNameIndex")
						.HasFilter("[NormalizedUserName] IS NOT NULL");

					b.ToTable("AspNetUsers", (string)null);
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
				{
					b.HasOne("Scheduler.Core.Models.User", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
				{
					b.HasOne("Scheduler.Core.Models.User", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
				{
					b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
						.WithMany()
						.HasForeignKey("RoleId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("Scheduler.Core.Models.User", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
				{
					b.HasOne("Scheduler.Core.Models.User", null)
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();
				});

			modelBuilder.Entity("Scheduler.Core.Models.Event", b =>
				{
					b.HasOne("Scheduler.Core.Models.Field", "Field")
						.WithMany()
						.HasForeignKey("FieldId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("Scheduler.Core.Models.User", "User")
						.WithMany()
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Field");

					b.Navigation("User");
				});

			modelBuilder.Entity("Scheduler.Core.Models.Game", b =>
				{
					b.HasOne("Scheduler.Core.Models.Event", "Event")
						.WithMany()
						.HasForeignKey("EventId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("Scheduler.Core.Models.Team", "HomeTeam")
						.WithMany()
						.HasForeignKey("HomeTeamId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.HasOne("Scheduler.Core.Models.Team", "OpposingTeam")
						.WithMany()
						.HasForeignKey("OpposingTeamId")
						.OnDelete(DeleteBehavior.Cascade)
						.IsRequired();

					b.Navigation("Event");

					b.Navigation("HomeTeam");

					b.Navigation("OpposingTeam");
				});
#pragma warning restore 612, 618
		}
	}
}
